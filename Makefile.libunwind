# Require make >= 3.81 (note that MAKE_VERSION is empty < 3.69).
ifneq ($(and $(MAKE_VERSION),$(firstword $(sort $(MAKE_VERSION) 3.81))),3.81)
$(error Make >= 3.81 required)
endif

# Disable all builtin rules.
MAKEFLAGS += --no-builtin-rules
.SUFFIXES:

# Enable secondary expansion.
.SECONDEXPANSION:

# Directories
PREFIX ?= /opt/ia-toolchain

LIBUNWINDDIR := src/libunwind
LIBCXXDIR := src/libcxx

NEWLIBINC := $(PREFIX)/arm-none-eabi/include $(PREFIX)/lib/gcc/arm-none-eabi/10.3.0/include/ $(PREFIX)/lib/gcc/arm-none-eabi/10.3.0/include-fixed/

SRCDIR := $(LIBUNWINDDIR)/src
INCDIR := include_override $(LIBUNWINDDIR)/include $(LIBCXXDIR)/include $(NEWLIBINC)
OBJDIR := obj/libunwind
LIBDIR := lib

TO_PATCH := UnwindRegistersRestore.S UnwindRegistersSave.S
PATCHED := $(addprefix patch_dir/patched_, $(TO_PATCH))

# Source lists
CSRC := UnwindLevel1.c \
		UnwindLevel1-gcc-ext.c \
		Unwind-sjlj.c
CXXSRC := libunwind.cpp \
			Unwind-EHABI.cpp
ASMSRC := UnwindRegistersRestore.S \
			UnwindRegistersSave.S
SRC := $(filter-out $(TO_PATCH), $(CSRC) $(CXXSRC) $(ASMSRC)) $(PATCHED)
OBJS := $(addprefix $(OBJDIR)/,$(addsuffix .o,$(basename $(SRC))))

# Target
TARGET := libunwind.a

# Build tools
AR := arm-none-eabi-ar
CC := arm-none-eabi-gcc
CXX := arm-none-eabi-g++

VPATH = $(SRCDIR):patch_dir

# Build settings
MCUFLAGS := -mcpu=cortex-m4 -mthumb -mlittle-endian -mfpu=fpv4-sp-d16 -mfloat-abi=hard -ffreestanding

DEFS := -D_LIBUNWIND_IS_BAREMETAL=1 -D_LIBUNWIND_IS_NATIVE_ONLY=1 -DNDEBUG -D_LIBCPP_HAS_NO_THREADS=1
INCS := $(addprefix -I,$(INCDIR))
OPT := -Os -g
WARN := -Wall

CFLAGS := $(WARN) $(OPT) $(INCS) $(DEFS) $(MCUFLAGS) -fno-builtin -std=c99 -ffunction-sections -nostdinc
CXXFLAGS := $(WARN) $(OPT) $(INCS) $(DEFS) $(MCUFLAGS) -fno-builtin -std=c++11 -ffunction-sections -nostdinc
AFLAGS = -I$(SRCDIR)

# Targets
all: $(LIBDIR)/$(TARGET)

$(LIBDIR)/$(TARGET): $(OBJS) | $(LIBDIR)
	$(AR) -rcs $@ $^

clean:
	rm -rf $(OBJDIR) $(LIBDIR)/$(TARGET)

# Helpers
$(LIBDIR):
	@mkdir -p $@

$(OBJDIR):
	@mkdir -p $@

$(OBJS): | $(OBJDIR)

# Rules
$(OBJDIR)/%.o : %.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJDIR)/%.o : %.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJDIR)/%.o : %.S
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(AFLAGS) -c $< -o $@

patch_dir/patched_%.c : %.c $(wildcard patch/*)
	@mkdir -p $(dir $@)
	patch $< patch/$(addsuffix .patch,$(notdir $<)) -o $@

patch_dir/patched_%.cpp : %.cpp $(wildcard patch/*)
	@mkdir -p $(dir $@)
	patch $< patch/$(addsuffix .patch,$(notdir $<)) -o $@

patch_dir/patched_%.S : %.S $(wildcard patch/*)
	@mkdir -p $(dir $@)
	patch $< patch/$(addsuffix .patch,$(notdir $<)) -o $@

install: $(LIBDIR)/$(TARGET)
	@test -d $(PREFIX) || mkdir -p $(PREFIX)
	install -m 0644 $(LIBDIR)/$(TARGET) $(PREFIX)/arm-none-eabi/lib

.PHONY: all clean install
